---
- name: Gather system facts
  ansible.builtin.setup:

- name: Copy SSH key to VM
  ansible.builtin.copy:
    src: /home/garen/.ssh/lab9_tim_deploy
    dest: /home/ubuntu/.ssh/lab9_tim_deploy
    mode: '0600'

- name: Clone the repository from GitHub
  ansible.builtin.git:
    repo: 'git@github.com:pchen109/Lab-9.git'
    dest: /home/ubuntu/project
    clone: yes
    update: yes
    key_file: /home/ubuntu/.ssh/lab9_tim_deploy
    ssh_opts: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
  when: "'server_role_frontend_server' in group_names and ansible_facts['distribution'] == 'Ubuntu'"

- name: Install required dependencies for Docker
  ansible.builtin.apt:
    name:
      - ca-certificates
      - curl
    state: present
    update_cache: yes

- name: Create apt keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Docker GPG key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'

- name: Set permissions for Docker GPG key
  ansible.builtin.file:
    path: /etc/apt/keyrings/docker.asc
    mode: '0644'

- name: Get system architecture using dpkg
  ansible.builtin.command: dpkg --print-architecture
  register: dpkg_arch_result
  changed_when: false
  check_mode: no

- name: Add Docker repository
  ansible.builtin.shell:
    cmd: |
      echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  become: true

# - name: Add Docker repository to Apt sources
#   ansible.builtin.shell: |
#     echo "deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
#   args:
#     creates: /etc/apt/sources.list.d/docker.list

- name: Update apt package list
  ansible.builtin.apt:
    update_cache: yes

- name: Install Docker and related components
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: yes

- name: Create Docker group if it does not exist
  ansible.builtin.group:
    name: docker
    state: present

- name: Add user to the docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: [docker]
    append: yes

- name: Immediately apply group permissions for subsequent tasks
  ansible.builtin.shell: exec sg docker -c "echo Groups updated"
  register: group_update
  changed_when: false

- name: Reset ssh connection to allow user changes to affect ansible user
  ansible.builtin.meta:
    reset_connection

# - name: Change to the directory containing docker-compose.yml
#   ansible.builtin.shell:
#     cmd: "cd /home/ubuntu/project && docker compose up -d"
#   args:
#     chdir: "/path/to/your/folder"
#     creates: /path/to/your/folder/docker-compose.yml


- name: Create project/logs directory
  ansible.builtin.file:
    path: /home/ubuntu/project/logs
    state: directory
    mode: '0755'

# - name: Create the processing.log file (if needed)
#   ansible.builtin.file:
#     path: /home/ubuntu/project/logs/processing.log
#     state: touch  # Creates an empty file if it doesn't exist
#     mode: '0644'

- name: Create multiple log files
  ansible.builtin.file:
    path: "/home/ubuntu/project/logs/{{ item }}"
    state: touch  # Creates an empty file if it doesn't exist
    mode: '0646'
  with_items:
    - 'processing.log'
    - 'receiver.log'
    - 'analyzer.log'
    - 'storage.log'







- name: Ensure Docker Compose services are up
  ansible.builtin.shell:
    cmd: "docker compose up -d"
  args:
    chdir: "/home/ubuntu/project"

# - name: Run Docker Compose up
#   docker_compose:
#     project_src: /home/ubuntu/project
#     restarted: yes
#   become: true
